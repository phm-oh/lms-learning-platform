// File: backend/src/utils/emailService.js
// Path: backend/src/utils/emailService.js

const nodemailer = require('nodemailer');
require('dotenv').config();

// ========================================
// EMAIL TRANSPORTER CONFIGURATION
// ========================================

const createTransporter = () => {
  try {
    if (process.env.NODE_ENV === 'production') {
      // Production email configuration
      return nodemailer.createTransport({
        service: process.env.EMAIL_SERVICE || 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });
    } else {
      // Development - use Gmail for testing
      return nodemailer.createTransport({
        host: process.env.EMAIL_HOST || 'smtp.gmail.com',
        port: process.env.EMAIL_PORT || 587,
        secure: false,
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Email transporter creation failed:', error.message);
    return null;
  }
};

// ========================================
// EMAIL TEMPLATES
// ========================================

const emailTemplates = {
  // ‚úÖ User Registration Welcome Email
  welcomeStudent: (user) => ({
    subject: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LMS Platform!',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <div style="background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0;">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! üéâ</h1>
        </div>
        <div style="padding: 20px; background: white; border-radius: 0 0 8px 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <h2 style="color: #333;">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.firstName} ${user.lastName}!</h2>
          <p style="color: #666; line-height: 1.6;">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
          <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</h3>
            <p style="margin: 5px 0;"><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> ${user.email}</p>
            <p style="margin: 5px 0;"><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <span style="color: #4CAF50;">Active</span></p>
            <p style="margin: 5px 0;"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</strong> ${new Date().toLocaleDateString('th-TH')}</p>
          </div>
          <p style="color: #666;">üöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß!</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" 
               style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </a>
          </div>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 14px; text-align: center;">
            ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ LMS Platform<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${process.env.SUPPORT_EMAIL || 'support@lms.com'}
          </p>
        </div>
      </div>
    `
  }),

  // ‚úÖ Teacher Registration (Pending Approval)
  teacherPendingApproval: (user) => ({
    subject: '‚è≥ ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <div style="background: #FF9800; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0;">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚è≥</h1>
        </div>
        <div style="padding: 20px; background: white; border-radius: 0 0 8px 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <h2 style="color: #333;">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.firstName} ${user.lastName}</h2>
          <p style="color: #666; line-height: 1.6;">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤!</p>
          <div style="background: #fff3cd; padding: 20px; border-radius: 8px; border-left: 4px solid #FF9800; margin: 20px 0;">
            <h3 style="color: #856404; margin-top: 0;">üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h3>
            <p style="color: #856404; margin: 5px 0;">‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
          </div>
          <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</h3>
            <p style="margin: 5px 0;"><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> ${user.email}</p>
            <p style="margin: 5px 0;"><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> ${user.firstName} ${user.lastName}</p>
            <p style="margin: 5px 0;"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</strong> ${new Date().toLocaleDateString('th-TH')}</p>
          </div>
          <p style="color: #666;">üìß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 14px; text-align: center;">
            ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ LMS Platform<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${process.env.SUPPORT_EMAIL || 'support@lms.com'}
          </p>
        </div>
      </div>
    `
  }),

  // ‚úÖ Password Reset Email
  passwordReset: (user, resetToken) => ({
    subject: 'üîí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - LMS Platform',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <div style="background: #2196F3; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0;">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô üîí</h1>
        </div>
        <div style="padding: 20px; background: white; border-radius: 0 0 8px 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <h2 style="color: #333;">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.firstName} ${user.lastName}</h2>
          <p style="color: #666; line-height: 1.6;">‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
          <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; border-left: 4px solid #2196F3; margin: 20px 0;">
            <h3 style="color: #1976d2; margin-top: 0;">‚è∞ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ</h3>
            <p style="color: #1976d2; margin: 5px 0;">‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
          </div>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password/${resetToken}" 
               style="background: #2196F3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            </a>
          </div>
          <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="color: #666; margin: 0; font-size: 14px;">
              <strong>‡∏´‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</strong> ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå:<br>
              <code style="background: #eee; padding: 2px 6px; border-radius: 3px; font-size: 12px;">
                ${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password/${resetToken}
              </code>
            </p>
          </div>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 14px; text-align: center;">
            ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ LMS Platform<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${process.env.SUPPORT_EMAIL || 'support@lms.com'}
          </p>
        </div>
      </div>
    `
  }),

  // ‚úÖ Teacher Approval Notification
  teacherApproved: (user) => ({
    subject: 'üéâ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <div style="background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0;">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! üéâ</h1>
        </div>
        <div style="padding: 20px; background: white; border-radius: 0 0 8px 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <h2 style="color: #333;">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.firstName} ${user.lastName}</h2>
          <p style="color: #666; line-height: 1.6;">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!</p>
          <div style="background: #d4edda; padding: 20px; border-radius: 8px; border-left: 4px solid #4CAF50; margin: 20px 0;">
            <h3 style="color: #155724; margin-top: 0;">‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h3>
            <p style="color: #155724; margin: 5px 0;">‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
          </div>
          <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</h3>
            <ul style="color: #666; margin: 0; padding-left: 20px;">
              <li>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤</li>
              <li>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</li>
              <li>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>
              <li>‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>
              <li>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>
            </ul>
          </div>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" 
               style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </a>
          </div>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 14px; text-align: center;">
            ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ LMS Platform<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${process.env.SUPPORT_EMAIL || 'support@lms.com'}
          </p>
        </div>
      </div>
    `
  })
};

// ========================================
// EMAIL SENDING FUNCTIONS
// ========================================

class EmailService {
  constructor() {
    this.transporter = createTransporter();
  }

  async sendEmail(to, template) {
    try {
      // Check if transporter is available
      if (!this.transporter) {
        console.warn('‚ö†Ô∏è Email transporter not available - skipping email send');
        return { success: false, error: 'Email transporter not available' };
      }

      const mailOptions = {
        from: process.env.EMAIL_FROM || `"LMS Platform" <${process.env.EMAIL_USER || 'noreply@lms.com'}>`,
        to,
        subject: template.subject,
        html: template.html
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`‚úÖ Email sent successfully to ${to}: ${template.subject}`);
      
      if (process.env.NODE_ENV === 'development') {
        console.log(`üìß Email preview URL: ${nodemailer.getTestMessageUrl(result)}`);
      }
      
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error(`‚ùå Email sending failed to ${to}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // NOTIFICATION TRIGGER FUNCTIONS
  // ========================================

  async sendWelcomeEmail(user) {
    try {
      const template = user.role === 'student' 
        ? emailTemplates.welcomeStudent(user)
        : emailTemplates.teacherPendingApproval(user);
      
      return await this.sendEmail(user.email, template);
    } catch (error) {
      console.error('‚ùå Welcome email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendTeacherApprovalEmail(user) {
    try {
      const template = emailTemplates.teacherApproved(user);
      return await this.sendEmail(user.email, template);
    } catch (error) {
      console.error('‚ùå Teacher approval email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendPasswordResetEmail(user, resetToken) {
    try {
      const template = emailTemplates.passwordReset(user, resetToken);
      return await this.sendEmail(user.email, template);
    } catch (error) {
      console.error('‚ùå Password reset email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendEnrollmentRequestEmail(teacher, enrollment, student, course) {
    try {
      const template = {
        subject: `üéì ‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${course.title}`,
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
            <h2 style="color: #333;">‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
            <p>‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.firstName} ${student.lastName}</p>
            <p>‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤: ${course.title}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${new Date(enrollment.createdAt).toLocaleDateString('th-TH')}</p>
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/teacher/enrollments" 
               style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
              ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            </a>
          </div>
        `
      };
      
      return await this.sendEmail(teacher.email, template);
    } catch (error) {
      console.error('‚ùå Enrollment request email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendEnrollmentApprovedEmail(student, enrollment, course, teacher) {
    try {
      const template = {
        subject: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${course.title}`,
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
            <h2 style="color: #4CAF50;">‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!</h2>
            <p>‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤: ${course.title}</p>
            <p>‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: ${teacher.firstName} ${teacher.lastName}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${new Date().toLocaleDateString('th-TH')}</p>
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/courses/${course.id}" 
               style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </a>
          </div>
        `
      };
      
      return await this.sendEmail(student.email, template);
    } catch (error) {
      console.error('‚ùå Enrollment approved email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendNewLessonEmail(students, lesson, course) {
    try {
      const template = {
        subject: `üìö ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà: ${lesson.title}`,
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
            <h2 style="color: #333;">‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!</h2>
            <p>‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤: ${course.title}</p>
            <p>‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${lesson.title}</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${lesson.estimatedTime} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/lessons/${lesson.id}" 
               style="background: #2196F3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </a>
          </div>
        `
      };
      
      const results = await Promise.allSettled(
        students.map(student => this.sendEmail(student.email, template))
      );
      
      return {
        sent: results.filter(r => r.status === 'fulfilled' && r.value.success).length,
        failed: results.filter(r => r.status === 'rejected' || !r.value.success).length,
        total: students.length
      };
    } catch (error) {
      console.error('‚ùå New lesson email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendQuizResultsEmail(student, quiz, attempt) {
    try {
      const template = {
        subject: `üìä ‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${quiz.title}`,
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
            <h2 style="color: #333;">‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>
            <p>‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${quiz.title}</p>
            <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${attempt.score}/${quiz.maxScore} (${attempt.percentage}%)</p>
            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${attempt.percentage >= quiz.passingScore ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥: ${new Date(attempt.submittedAt).toLocaleDateString('th-TH')}</p>
            <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/quiz-results/${attempt.id}" 
               style="background: #FF9800; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
              ‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </a>
          </div>
        `
      };
      
      return await this.sendEmail(student.email, template);
    } catch (error) {
      console.error('‚ùå Quiz results email failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // UTILITY FUNCTIONS
  // ========================================

  async testEmailConnection() {
    try {
      if (!this.transporter) {
        return { success: false, error: 'Email transporter not available' };
      }

      await this.transporter.verify();
      console.log('‚úÖ Email connection test successful');
      return { success: true, message: 'Email connection successful' };
    } catch (error) {
      console.error('‚ùå Email connection test failed:', error.message);
      return { success: false, error: error.message };
    }
  }
}

// ========================================
// EXPORT & HELPER FUNCTIONS
// ========================================

const emailService = new EmailService();

// Helper function to integrate with Socket.IO notifications
const sendNotificationWithEmail = async (userId, notificationType, data) => {
  try {
    // Send real-time notification via Socket.IO
    const io = require('../app').get('io');
    if (io) {
      io.to(`user-${userId}`).emit('notification', {
        type: notificationType,
        data,
        timestamp: new Date()
      });
    }

    // Send email notification based on type
    switch (notificationType) {
      case 'enrollment_request':
        return await emailService.sendEnrollmentRequestEmail(
          data.teacher, data.enrollment, data.student, data.course
        );
      case 'enrollment_approved':
        return await emailService.sendEnrollmentApprovedEmail(
          data.student, data.enrollment, data.course, data.teacher
        );
      case 'new_lesson':
        return await emailService.sendNewLessonEmail(
          data.students, data.lesson, data.course
        );
      case 'quiz_results':
        return await emailService.sendQuizResultsEmail(
          data.student, data.quiz, data.attempt
        );
      default:
        console.log(`üìß No email template for notification type: ${notificationType}`);
        return { success: true, message: 'No email template' };
    }
  } catch (error) {
    console.error('‚ùå Notification sending failed:', error.message);
    return { success: false, error: error.message };
  }
};

module.exports = {
  emailService,
  emailTemplates,
  sendNotificationWithEmail
};