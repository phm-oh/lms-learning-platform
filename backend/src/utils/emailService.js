// File: backend/src/utils/emailService.js
// Path: backend/src/utils/emailService.js

const nodemailer = require('nodemailer');
require('dotenv').config();

// ========================================
// EMAIL TRANSPORTER CONFIGURATION
// ========================================

const createTransporter = () => {
  if (process.env.NODE_ENV === 'production') {
    // Production email configuration
    return nodemailer.createTransporter({
      service: 'Gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS // App password
      }
    });
  } else {
    // Development - use Ethereal Email for testing
    return nodemailer.createTransporter({
      host: 'smtp.ethereal.email',
      port: 587,
      auth: {
        user: 'ethereal.user@ethereal.email',
        pass: 'verysecret'
      }
    });
  }
};

// ========================================
// EMAIL TEMPLATES
// ========================================

const emailTemplates = {
  // тЬЕ User Registration Welcome Email
  welcomeStudent: (user) => ({
    subject: 'ЁЯОЙ р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ър╕кр╕╣р╣И LMS Platform!',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #4CAF50;">р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ъ ${user.firstName} ${user.lastName}!</h2>
        <p>р╕Ър╕▒р╕Нр╕Кр╕╡р╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з</p>
        <div style="background: #f5f5f5; padding: 20px; border-radius: 8px;">
          <h3>р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ър╕▒р╕Нр╕Кр╕╡:</h3>
          <p><strong>р╕нр╕╡р╣Ар╕бр╕е:</strong> ${user.email}</p>
          <p><strong>р╕кр╕Цр╕▓р╕Щр╕░:</strong> Active</p>
        </div>
        <p>ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Др╕Фр╣Йр╣Ар╕ер╕в!</p>
        <a href="${process.env.FRONTEND_URL}/login" 
           style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ
        </a>
      </div>
    `
  }),

  // тЬЕ Teacher Registration (Pending Approval)
  teacherPendingApproval: (user) => ({
    subject: 'тП│ р╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щ - р╕гр╕нр╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #FF9800;">р╕кр╕зр╕▒р╕кр╕Фр╕╡ ${user.firstName} ${user.lastName}</h2>
        <p>р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕гр╣Ар╕Ыр╣Зр╕Щр╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щр╕Бр╕▒р╕Ър╣Ар╕гр╕▓!</p>
        <div style="background: #fff3cd; padding: 20px; border-radius: 8px; border-left: 4px solid #FF9800;">
          <h3>ЁЯФН р╕кр╕Цр╕▓р╕Щр╕░: р╕гр╕нр╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ</h3>
          <p>р╣Ар╕гр╕▓р╕Ир╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╕Ър╕▒р╕Нр╕Кр╕╡р╕ар╕▓р╕вр╣Гр╕Щ 24-48 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З</p>
        </div>
        <p>ЁЯУз р╕Др╕╕р╕Ур╕Ир╕░р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕╡р╣Ар╕бр╕ер╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕Ър╕▒р╕Нр╕Кр╕╡р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤</p>
      </div>
    `
  }),

  // тЬЕ Teacher Approval Notification
  teacherApproved: (user) => ({
    subject: 'ЁЯОЙ р╕Ър╕▒р╕Нр╕Кр╕╡р╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Бр╕ер╣Йр╕з!',
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #4CAF50;">р╕вр╕┤р╕Щр╕Фр╕╡р╕Фр╣Йр╕зр╕в ${user.firstName}!</h2>
        <p>р╕Ър╕▒р╕Нр╕Кр╕╡р╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з! ЁЯОК</p>
        <div style="background: #d4edda; padding: 20px; border-radius: 8px;">
          <h3>тЬЕ р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕│р╕кр╕┤р╣Ир╕Зр╕Хр╣Ир╕нр╣Др╕Ыр╕Щр╕╡р╣Йр╣Др╕Фр╣Йр╣Бр╕ер╣Йр╕з:</h3>
          <ul>
            <li>ЁЯУЪ р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕зр╕┤р╕Кр╕▓р╣Гр╕лр╕бр╣И</li>
            <li>ЁЯУЦ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ър╕Чр╣Ар╕гр╕╡р╕вр╕Щр╣Бр╕ер╕░р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓</li>
            <li>ЁЯОп р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Ър╕Ър╕Чр╕Фр╕кр╕нр╕Ъ</li>
            <li>ЁЯСе р╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╣Ар╕гр╕╡р╕вр╕Щр╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ</li>
          </ul>
        </div>
        <a href="${process.env.FRONTEND_URL}/teacher/dashboard" 
           style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╣Бр╕Фр╕Кр╕Ър╕нр╕гр╣Мр╕Фр╕Др╕гр╕╣
        </a>
      </div>
    `
  }),

  // тЬЕ Enrollment Request (to Teacher)
  enrollmentRequest: (enrollment, student, course) => ({
    subject: `ЁЯУЭ р╕бр╕╡р╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕Вр╕нр╣Ар╕Вр╣Йр╕▓р╣Ар╕гр╕╡р╕вр╕Щ: ${course.title}`,
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #2196F3;">р╕бр╕╡р╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕лр╕бр╣Ир╕Вр╕нр╣Ар╕Вр╣Йр╕▓р╣Ар╕гр╕╡р╕вр╕Щ!</h2>
        <div style="background: #e3f2fd; padding: 20px; border-radius: 8px;">
          <h3>ЁЯСд р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ:</h3>
          <p><strong>р╕Кр╕╖р╣Ир╕н:</strong> ${student.firstName} ${student.lastName}</p>
          <p><strong>р╕нр╕╡р╣Ар╕бр╕е:</strong> ${student.email}</p>
          <p><strong>р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕г:</strong> ${new Date(enrollment.enrolledAt).toLocaleString('th-TH')}</p>
        </div>
        <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin-top: 15px;">
          <h3>ЁЯУЪ р╕гр╕▓р╕вр╕зр╕┤р╕Кр╕▓:</h3>
          <p><strong>${course.title}</strong></p>
          <p>${course.description}</p>
        </div>
        <p>ЁЯСитАНЁЯПл р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╣Ар╕гр╕╡р╕вр╕Щ</p>
        <a href="${process.env.FRONTEND_URL}/teacher/courses/${course.id}/students" 
           style="background: #2196F3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ
        </a>
      </div>
    `
  }),

  // тЬЕ Enrollment Approved (to Student)
  enrollmentApproved: (enrollment, course, teacher) => ({
    subject: `тЬЕ р╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Ар╕Вр╣Йр╕▓р╣Ар╕гр╕╡р╕вр╕Щ: ${course.title}`,
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #4CAF50;">р╕вр╕┤р╕Щр╕Фр╕╡р╕Фр╣Йр╕зр╕в! ЁЯОЙ</h2>
        <p>р╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Гр╕лр╣Йр╣Ар╕Вр╣Йр╕▓р╣Ар╕гр╕╡р╕вр╕Щр╣Бр╕ер╣Йр╕з!</p>
        <div style="background: #d4edda; padding: 20px; border-radius: 8px;">
          <h3>ЁЯУЪ р╕гр╕▓р╕вр╕зр╕┤р╕Кр╕▓: ${course.title}</h3>
          <p>${course.description}</p>
          <p><strong>ЁЯСитАНЁЯПл р╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щ:</strong> ${teacher.firstName} ${teacher.lastName}</p>
          <p><strong>тЬЕ р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤:</strong> ${new Date().toLocaleString('th-TH')}</p>
        </div>
        <p>ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╣Ар╕гр╕╡р╕вр╕Щр╣Др╕Фр╣Йр╣Ар╕ер╕в!</p>
        <a href="${process.env.FRONTEND_URL}/courses/${course.id}" 
           style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕Ър╕Чр╣Ар╕гр╕╡р╕вр╕Щ
        </a>
      </div>
    `
  }),

  // тЬЕ New Lesson Published (to Students)
  newLessonPublished: (lesson, course) => ({
    subject: `ЁЯУЦ р╕Ър╕Чр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕лр╕бр╣И: ${lesson.title}`,
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #9C27B0;">р╕бр╕╡р╕Ър╕Чр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕лр╕бр╣Ир╣Бр╕ер╣Йр╕з! ЁЯУЪ</h2>
        <div style="background: #f3e5f5; padding: 20px; border-radius: 8px;">
          <h3>ЁЯУЦ ${lesson.title}</h3>
          <p><strong>р╕гр╕▓р╕вр╕зр╕┤р╕Кр╕▓:</strong> ${course.title}</p>
          <p><strong>р╕Ыр╕гр╕░р╣Ар╕ар╕Ч:</strong> ${lesson.lessonType}</p>
          <p><strong>р╕гр╕░р╕вр╕░р╣Ар╕зр╕ер╕▓р╣Вр╕Фр╕вр╕Ыр╕гр╕░р╕бр╕▓р╕У:</strong> ${lesson.estimatedTime} р╕Щр╕▓р╕Чр╕╡</p>
          ${lesson.description ? `<p>${lesson.description}</p>` : ''}
        </div>
        <p>ЁЯОп р╣Ар╕гр╕┤р╣Ир╕бр╣Ар╕гр╕╡р╕вр╕Щр╣Ар╕ер╕в!</p>
        <a href="${process.env.FRONTEND_URL}/lessons/${lesson.id}" 
           style="background: #9C27B0; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          р╣Ар╕гр╕┤р╣Ир╕бр╕Ър╕Чр╣Ар╕гр╕╡р╕вр╕Щ
        </a>
      </div>
    `
  }),

  // тЬЕ Quiz Results (to Student)
  quizResults: (quiz, attempt, student) => ({
    subject: `ЁЯУК р╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕│р╣Бр╕Ър╕Ър╕Чр╕Фр╕кр╕нр╕Ъ: ${quiz.title}`,
    html: `
      <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h2 style="color: #FF5722;">р╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕│р╣Бр╕Ър╕Ър╕Чр╕Фр╕кр╕нр╕Ъ ЁЯУК</h2>
        <div style="background: #fff3e0; padding: 20px; border-radius: 8px;">
          <h3>ЁЯОп ${quiz.title}</h3>
          <div style="font-size: 24px; text-align: center; margin: 20px 0;">
            <span style="color: ${attempt.percentage >= quiz.passingScore ? '#4CAF50' : '#F44336'}; font-weight: bold;">
              ${attempt.percentage}%
            </span>
          </div>
          <p><strong>р╕Др╕░р╣Бр╕Щр╕Щ:</strong> ${attempt.score}/${attempt.maxScore}</p>
          <p><strong>р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Й:</strong> ${Math.floor(attempt.timeSpent / 60)} р╕Щр╕▓р╕Чр╕╡</p>
          <p><strong>р╕кр╕Цр╕▓р╕Щр╕░:</strong> 
            <span style="color: ${attempt.percentage >= quiz.passingScore ? '#4CAF50' : '#F44336'};">
              ${attempt.percentage >= quiz.passingScore ? 'тЬЕ р╕Ьр╣Ир╕▓р╕Щ' : 'тЭМ р╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ'}
            </span>
          </p>
        </div>
        ${attempt.percentage < quiz.passingScore && attempt.attemptNumber < quiz.maxAttempts ? 
          `<p>ЁЯТк р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕│р╣Бр╕Ър╕Ър╕Чр╕Фр╕кр╕нр╕Ър╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Й!</p>
           <a href="${process.env.FRONTEND_URL}/quizzes/${quiz.id}" 
              style="background: #FF5722; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
             р╕Чр╕│р╣Гр╕лр╕бр╣И
           </a>` : ''
        }
      </div>
    `
  })
};

// ========================================
// EMAIL SENDING FUNCTIONS
// ========================================

class EmailService {
  constructor() {
    this.transporter = createTransporter();
  }

  async sendEmail(to, template) {
    try {
      const mailOptions = {
        from: `"LMS Platform" <${process.env.EMAIL_USER || 'noreply@lms.com'}>`,
        to,
        subject: template.subject,
        html: template.html
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`ЁЯУз Email sent to ${to}: ${template.subject}`);
      
      if (process.env.NODE_ENV === 'development') {
        console.log(`ЁЯУз Preview URL: ${nodemailer.getTestMessageUrl(result)}`);
      }
      
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error(`тЭМ Email sending failed:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // NOTIFICATION TRIGGER FUNCTIONS
  // ========================================

  async sendWelcomeEmail(user) {
    const template = user.role === 'student' 
      ? emailTemplates.welcomeStudent(user)
      : emailTemplates.teacherPendingApproval(user);
    
    return this.sendEmail(user.email, template);
  }

  async sendTeacherApprovalEmail(user) {
    const template = emailTemplates.teacherApproved(user);
    return this.sendEmail(user.email, template);
  }

  async sendEnrollmentRequestEmail(teacher, enrollment, student, course) {
    const template = emailTemplates.enrollmentRequest(enrollment, student, course);
    return this.sendEmail(teacher.email, template);
  }

  async sendEnrollmentApprovedEmail(student, enrollment, course, teacher) {
    const template = emailTemplates.enrollmentApproved(enrollment, course, teacher);
    return this.sendEmail(student.email, template);
  }

  async sendNewLessonEmail(students, lesson, course) {
    const template = emailTemplates.newLessonPublished(lesson, course);
    
    const results = await Promise.allSettled(
      students.map(student => this.sendEmail(student.email, template))
    );
    
    return {
      sent: results.filter(r => r.status === 'fulfilled' && r.value.success).length,
      failed: results.filter(r => r.status === 'rejected' || !r.value.success).length,
      total: students.length
    };
  }

  async sendQuizResultsEmail(student, quiz, attempt) {
    const template = emailTemplates.quizResults(quiz, attempt, student);
    return this.sendEmail(student.email, template);
  }
}

// ========================================
// EXPORT & HELPER FUNCTIONS
// ========================================

const emailService = new EmailService();

// Helper function to integrate with Socket.IO notifications
const sendNotificationWithEmail = async (userId, notificationType, data) => {
  try {
    // Send real-time notification via Socket.IO
    const io = require('../app').get('io');
    if (io) {
      io.to(`user-${userId}`).emit('notification', {
        type: notificationType,
        data,
        timestamp: new Date()
      });
    }

    // Send email notification based on type
    switch (notificationType) {
      case 'enrollment_request':
        return emailService.sendEnrollmentRequestEmail(
          data.teacher, data.enrollment, data.student, data.course
        );
      case 'enrollment_approved':
        return emailService.sendEnrollmentApprovedEmail(
          data.student, data.enrollment, data.course, data.teacher
        );
      case 'new_lesson':
        return emailService.sendNewLessonEmail(
          data.students, data.lesson, data.course
        );
      case 'quiz_results':
        return emailService.sendQuizResultsEmail(
          data.student, data.quiz, data.attempt
        );
      default:
        console.log(`ЁЯУз No email template for notification type: ${notificationType}`);
        return { success: true, message: 'No email template' };
    }
  } catch (error) {
    console.error('тЭМ Notification sending failed:', error.message);
    return { success: false, error: error.message };
  }
};

module.exports = {
  emailService,
  emailTemplates,
  sendNotificationWithEmail
};